
half4 spline(half intensity)
{
	half4 black = {0.0, 0.0, 0.0, 0.0};
	half4 red = {1.0, 0.3, 0.1, 1.0};
	half4 dpurple = {0.2, 0.0, 0.2, 1.0};
	half4 orange = {0.95, 0.7, 0.05, 1.0};
 	half4 yellow = {0.95, 0.95, 0.1, 1.0};
	half4 lyellow = {1.0, 1.0, 0.8, 1.0};

	half4 color;

	if (intensity > 0.6) { color = lyellow; }
	else if (intensity > 0.5) { color = yellow; }
	else if (intensity > 0.3) { color = orange; }
	else if (intensity > 0.1) { color = red; }
	else if (intensity > 0.05) { color = dpurple; }
	else { color = black; }
	
	return color;	
}

half4 main(
	float2 position           				: TEXCOORD0,
	float2 base_position           			: TEXCOORD1,
	uniform float2 scale_factor				: register (c0),
	uniform float transparency				: register (c1),
	uniform float intensity					: register (c2),
	uniform float blend						: register (c3),
	uniform float flame_height				: register (c4),
	uniform float count						: register (c5),
    uniform sampler2D texture0				: register (s1),
    uniform sampler2D texture1				: register (s2),
    uniform sampler2D texture2				: register (s3),
    uniform sampler2D texture3				: register (s4),
    uniform sampler2D base_texture			: register (s0)
	) : COLOR
{
	float4 					Shade;
	float4 					Color;
	float4					color_element[4];

	float					FlameHeight = flame_height + abs(sin(position.x + (count / 35.0)) / 37.0) + 
										  (cos(position.x + count * 0.05) / 27.7);

	int						i;

	float2 position2 = position * scale_factor;

	color_element[0] = (half4)tex2D(texture0, position2);
	color_element[1] = (half4)tex2D(texture1, position2);
	color_element[2] = (half4)tex2D(texture2, position2);
 	color_element[3] = (half4)tex2D(texture3, position2);

	Shade = color_element[0] +
			color_element[1] / 2.0 +
			color_element[2] / 4.0 +
			color_element[3] / 8.0;

	Shade *= intensity;

	Shade *=  (FlameHeight - position.y);

	Color = (half4)tex2D(base_texture, position);

	float4 blend_factor = blend + ((1.0 - blend) * Color);
	Color = (transparency * Shade * blend_factor) + ((1.0 - transparency) * Color);

	
// 	Color.x = intensity;

	Color = Shade;

	Color = (half4)spline(Color.x);

    return (half4)Color;
}
