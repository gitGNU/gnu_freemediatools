!!FP1.0
# NV_fragment_program generated by NVIDIA Cg compiler
# cgc version 1.2.1001, build date Mar 17 2004  10:32:28
# command line args: -profile fp30
#vendor NVIDIA Corporation
#version 1.0.02
#profile fp30
#program main
#semantic main.horizontal : C0
#semantic main.vertical : C1
#semantic main.stretch : C2
#semantic main.scale_factor : C3
#semantic main.intensity : C4
#semantic main.blend : C5
#semantic main.transparency : C6
#semantic main.base_texture : TEXUNIT0
#semantic main.fire_texture : TEXUNIT1
#var float horizontal : C0 :  : 1 : 1
#var float vertical : C1 :  : 2 : 1
#var float stretch : C2 :  : 3 : 1
#var float2 scale_factor : C3 :  : 4 : 1
#var float intensity : C4 :  : 5 : 1
#var float blend : C5 :  : 6 : 1
#var float transparency : C6 :  : 7 : 1
#var sampler2D base_texture : TEXUNIT0 : texunit 0 : 8 : 1
#var sampler2D fire_texture : TEXUNIT1 : texunit 1 : 9 : 1
#var float2 position : $vin.TEXCOORD0 : TEX0 : 0 : 1
#var half4 main : $vout.COLOR : COL : -1 : 1
DECLARE horizontal;
DECLARE vertical;
DECLARE stretch;
DECLARE scale_factor;
DECLARE intensity;
DECLARE blend;
DECLARE transparency;
TEX R0, f[TEX0].xyxx, TEX0, 2D;
MOVR R1.x, horizontal.x;
SLTR H0.x, {0}.x, R1.x;
MOVR R1.x, vertical.x;
SLTR H0.y, {0}.x, R1.x;
ADDX H0.y, H0.x, H0.y;
MINX H0.y, H0.y, {1}.x;
MOVR R1.x, horizontal.x;
SLTR H0.x, {0}.x, R1.x;
MULX H0.x, H0.y, H0.x;
MULR R1.xy, f[TEX0].xyxx, scale_factor.xyxx;
MOVR R2.xy, R1.xyxx;
ADDR R1.w, R1.x, stretch.x;
MOVXC HC.x, H0.x;
MOVR R2.x(GT.x), R1.w;
TEX R3, R2.xyxx, TEX1, 2D;
TEX R4, R1.xyxx, TEX1, 2D;
ADDH H1, R4, R3;
MOVR H2, R4;
MOVXC HC.x, H0.x;
MOVH H2(GT.x), H1;
MOVH H1, H2;
MOVR R3.xy, R1.xyxx;
ADDR R1.w, R1.x, -stretch.x;
MOVXC HC.x, H0.x;
MOVR R3.x(GT.x), R1.w;
MOVR R1.w, vertical.x;
SLTR H0.z, {0}.x, R1.w;
MULX H0.z, H0.y, H0.z;
TEX R4, R3.xyxx, TEX1, 2D;
ADDH H2, H2, R4;
MOVXC HC.x, H0.x;
MOVH H1(GT.x), H2;
MOVH H2, H1;
MOVR R4.xy, R1.xyxx;
ADDR R1.w, R1.y, stretch.x;
MOVXC HC.x, H0.z;
MOVR R4.y(GT.x), R1.w;
MOVR R1.w, horizontal.x;
SLTR H0.y, {1}.x, R1.w;
MOVR R1.w, vertical.x;
SLTR H0.w, {1}.x, R1.w;
ADDX H0.w, H0.y, H0.w;
MINX H0.w, H0.w, {1}.x;
TEX R5, R4.xyxx, TEX1, 2D;
ADDH H1, H1, R5;
MOVXC HC.x, H0.z;
MOVH H2(GT.x), H1;
MOVH H1, H2;
MOVR R5.xy, R1.xyxx;
ADDR R1.x, R1.y, -stretch.x;
MOVXC HC.x, H0.z;
MOVR R5.y(GT.x), R1.x;
MOVR R1.x, horizontal.x;
SLTR H0.y, {1}.x, R1.x;
MULX H0.y, H0.w, H0.y;
TEX R1, R5.xyxx, TEX1, 2D;
ADDH H2, H2, R1;
MOVXC HC.x, H0.z;
MOVH H1(GT.x), H2;
MOVH H2, H1;
MOVR R1.xy, R2.xyxx;
ADDR R1.w, R2.x, stretch.x;
MOVXC HC.x, H0.y;
MOVR R1.x(GT.x), R1.w;
TEX R2, R1.xyxx, TEX1, 2D;
ADDH H1, H1, R2;
MOVXC HC.x, H0.y;
MOVH H2(GT.x), H1;
MOVH H1, H2;
MOVR R2.xy, R3.xyxx;
ADDR R1.w, R3.x, -stretch.x;
MOVXC HC.x, H0.y;
MOVR R2.x(GT.x), R1.w;
MOVR R1.w, vertical.x;
SLTR H3.x, {1}.x, R1.w;
MULX H3.x, H0.w, H3.x;
TEX R3, R2.xyxx, TEX1, 2D;
ADDH H2, H2, R3;
MOVXC HC.x, H0.y;
MOVH H1(GT.x), H2;
MOVH H2, H1;
MOVR R3.xy, R4.xyxx;
ADDR R1.w, R4.y, stretch.x;
MOVXC HC.x, H3.x;
MOVR R3.y(GT.x), R1.w;
MOVR R1.w, {0}.x;
MOVXC HC.x, H0.x;
MOVR R1.w(GT.x), {1}.x;
TEX R4, R3.xyxx, TEX1, 2D;
ADDH H1, H1, R4;
MOVXC HC.x, H3.x;
MOVH H2(GT.x), H1;
MOVH H1, H2;
MOVR R4.xy, R5.xyxx;
ADDR R2.w, R5.y, -stretch.x;
MOVXC HC.x, H3.x;
MOVR R4.y(GT.x), R2.w;
MOVR R2.w, R1.w;
ADDR R1.w, R1.w, {1}.x;
MOVXC HC.x, H0.z;
MOVR R2.w(GT.x), R1.w;
TEX R5, R4.xyxx, TEX1, 2D;
ADDH H2, H2, R5;
MOVXC HC.x, H3.x;
MOVH H1(GT.x), H2;
MOVH H2, H1;
MOVR R1.w, horizontal.x;
SLTR H0.x, {2}.x, R1.w;
MOVR R1.w, vertical.x;
SLTR H0.z, {2}.x, R1.w;
ADDX H0.z, H0.x, H0.z;
MINX H0.z, H0.z, {1}.x;
MOVR R5.y, R1.y;
ADDR R1.x, R1.x, stretch.x;
MOVR R5.x, R1.x;
TEX R1, R5.xyxx, TEX1, 2D;
ADDH H1, H1, R1;
MOVR R1.x, R2.w;
ADDR R2.w, R2.w, {1}.x;
MOVXC HC.x, H0.y;
MOVR R1.x(GT.x), R2.w;
MOVR R1.y, horizontal.x;
SLTR H0.x, {2}.x, R1.y;
MULX H0.x, H0.z, H0.x;
MOVXC HC.x, H0.x;
MOVH H2(GT.x), H1;
MOVH H1, H2;
MOVR R5.y, R2.y;
ADDR R1.y, R2.x, -stretch.x;
MOVR R5.x, R1.y;
TEX R2, R5.xyxx, TEX1, 2D;
ADDH H2, H2, R2;
MOVXC HC.x, H0.x;
MOVH H1(GT.x), H2;
MOVH H2, H1;
MOVR R1.y, R1.x;
ADDR R1.x, R1.x, {1}.x;
MOVXC HC.x, H3.x;
MOVR R1.y(GT.x), R1.x;
MOVR R2.x, R3.x;
ADDR R1.x, R3.y, stretch.x;
MOVR R2.y, R1.x;
TEX R2, R2.xyxx, TEX1, 2D;
ADDH H1, H1, R2;
MOVR R1.x, R1.y;
ADDR R1.y, R1.y, {1}.x;
MOVXC HC.x, H0.x;
MOVR R1.x(GT.x), R1.y;
MOVR R1.y, vertical.x;
SLTR H0.x, {2}.x, R1.y;
MULX H0.x, H0.z, H0.x;
MOVXC HC.x, H0.x;
MOVH H2(GT.x), H1;
MOVH H1, H2;
MOVR R2.x, R4.x;
ADDR R1.y, R4.y, -stretch.x;
MOVR R2.y, R1.y;
TEX R2, R2.xyxx, TEX1, 2D;
ADDH H2, H2, R2;
MOVXC HC.x, H0.x;
MOVH H1(GT.x), H2;
MOVH H2, H1;
MOVR R1.y, R1.x;
ADDR R1.x, R1.x, {1}.x;
MOVXC HC.x, H0.x;
MOVR R1.y(GT.x), R1.x;
SGTR H0.x, R1.y, {0}.x;
MADR R1.y, R1.y, {2}.x, {1}.x;
RCPR R1.y, R1.y;
MULR R1, H1, R1.y;
MOVXC HC.x, H0.x;
MOVH H2(GT.x), R1;
MULR R1, transparency.x, H2;
MOVR R2.x, blend.x;
ADDR R2.x, {1}.x, -R2.x;
MADR R2, R2.x, R0, blend.x;
MOVR R3.x, transparency.x;
ADDR R3.x, {1}.x, -R3.x;
MULR R0, R3.x, R0;
MADR o[COLH], R1, R2, R0;
END
# 181 instructions, 6 R-regs, 4 H-regs.
# End of program
