
half4 main(
	float2 position           				: TEXCOORD0,
	float2 noise_position           		: TEXCOORD1,
	uniform float2 scale_factor				: register (c0),
	uniform float2 distortion				: register (c1),
	uniform float time						: register (c2),
	uniform float timescale					: register (c3),
    uniform sampler2D turbulence_texture	: register (s0),
    uniform sampler2D base_texture			: register (s1)
		  ) : COLOR
{
	float4 					Color;
	float4					Turbulence;
	float					local_time = time;


	float2 turbulence_position = (0.1 + abs(sin((noise_position - ((time) / timescale))))) * scale_factor * 0.9;
	Turbulence = (half4)tex2D(turbulence_texture, turbulence_position);

	float2 uv = position + ((Turbulence.xx * distortion / 20.0) * position.y);
	uv.y /= frac(time / timescale);

	if (uv.y > 1.0) 
	{
		uv.x = 1.0;
		uv.y = 1.0;
	}

// 	uv = sqrt(position.x + position.y);

//  	Color = (half4)tex2D(base_texture, uv);
// 	float2 uv = position - 0.5;
// 	uv += uv;
// 	uv *= uv;
// 	uv.x = sqrt(uv.x + uv.y);	// radial mapping
// 	uv.y = position.y + sqrt(position.y) * distortion * Turbulence.x;


// 	uv.x = sqrt(uv.x + uv.y);
 	Color = (half4)tex2D(base_texture, uv);

// 	Color = (Color + Base_color) / 2.0;

//  	Color = (noise_position.xyxy + 1.0) / 2.0;
//   	Color = position2.xyxy * 2;

//  	Color = uv.xyxy;
// 	Color = Turbulence;

    return (half4)Color;
}
